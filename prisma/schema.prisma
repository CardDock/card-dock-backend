// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int                 @id @default(autoincrement())
  name            String
  email           String              @unique
  role            Role                @default(USER)
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  lastLogin       DateTime?
  isActive        Boolean             @default(true)
  verified        Boolean             @default(false)
  notifications   UserNotifications[]
  authProviders   AuthProvider[]
  UserProfile     UserProfile[]
  profileId       Int?
  UserPreferences UserPreferences[]
  UserCollection  UserCollection[]

  @@index([email])
}

model AuthProvider {
  id           Int      @id @default(autoincrement())
  provider     Provider
  passwordHash String?
  providerId   String //identificador del usuario proporcionado por el proveedor de autenticaci√≥n
  userId       Int?
  user         User?    @relation(fields: [userId], references: [id])

  @@index([providerId])
}

model UserProfile {
  id            Int           @id @default(autoincrement())
  userId        Int           @unique
  countryId     Int
  cityId        Int
  birthdate     DateTime?
  bio           String?
  portraitUser  String?
  landscapeUser String?
  contactEmail  String?
  contactPhone  String?
  UserAddress   UserAddress[]
  user          User          @relation(fields: [userId], references: [id])
}

model UserPreferences {
  id            Int      @id @default(autoincrement())
  language      Language @default(SPANISH)
  notifications Boolean  @default(true)
  userId        Int
  user          User     @relation(fields: [userId], references: [id])
}

model UserAddress {
  id            Int          @id @default(autoincrement())
  street        String?
  dirComplement String?
  state         String?
  postalCode    String?
  profileId     Int
  countryId     Int
  cityId        Int
  userProfileId Int?
  country       Country      @relation(fields: [countryId], references: [id])
  city          City         @relation(fields: [cityId], references: [id])
  UserProfile   UserProfile? @relation(fields: [userProfileId], references: [id])
}

model Country {
  id          Int           @id @default(autoincrement())
  code        String        @unique
  name        String
  cities      City[]
  isActive    Boolean       @default(true)
  UserAddress UserAddress[]
}

model City {
  id        Int           @id @default(autoincrement())
  name      String
  countryId Int
  isActive  Boolean       @default(true)
  Address   UserAddress[]
  country   Country       @relation(fields: [countryId], references: [id])
}

model UserNotifications {
  id        Int              @id @default(autoincrement())
  userId    Int
  content   String
  type      NotificationType
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())
  User      User             @relation(fields: [userId], references: [id])
}

enum Provider {
  GOOGLE
  FACEBOOK
}

enum Role {
  USER
  PROFESSIONAL
  ADMIN
}

enum Language {
  SPANISH
  ENGLISH
}

enum NotificationType {
  INFO // Mensaje informativo
  ALERT // Mensaje de alerta
  REMINDER // Recordatorio
}

// Modelo para las cartas

model Card {
  id          Int              @id @default(autoincrement())
  set         CardSet
  apiId       String           @unique
  name        String?
  apiData     Json?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  collections UserCollection[]

  @@index([set, apiId, name, apiData])
}

model UserCollection {
  id                 Int                  @id @default(autoincrement())
  cardId             Int
  userId             Int
  userCardProperties UserCardProperties[]
  createAt           DateTime             @default(now())
  updateAt           DateTime             @updatedAt
  Card               Card                 @relation(fields: [cardId], references: [id])
  User               User                 @relation(fields: [userId], references: [id])
}

model UserCardProperties {
  id               Int             @id @default(autoincrement())
  condition        CardCondition
  rarity           String?
  userCollectionId Int
  updateAt         DateTime        @updatedAt
  UserCollection   UserCollection? @relation(fields: [userCollectionId], references: [id])
}

enum CardSet {
  MAGIC
  POKEMON
  YUGIOH
  LORCANA
  DRAGON_BALL_SUPER
  ONE_PIECE
  DIGIMONC
  STAR_WARS_DESTINY
  STAR_WARS_UNLIMITED
}

enum CardCondition {
  MINT
  NEAR_MINT
  EXCELLENT
  GOOD
  LIGHT_PLAYED
  PLAYED
  POOR
}
